


            <div class="changed_added_2_0">

            <p>This element declares the usage contract for a composite
            component. Optionally, and at the component author's
            discretion, this contract exposes the features of one or
            more inner components to the page author. The page author
            can work with the composite component as a single component
            whose feature set is the union of the features declared in
            the usage contract.</p>

            <p>For example, consider a composite component that
            implements the functionality of a "login panel". Such a
            component would likely have two text fields and one button.
            The user of such a component might like to do one or more of
            the following.</p>

            <ul>

            <li><p>Be able to listen for the <code>ActionEvent</code>
            on the button.</p>

            <p>In this case, a
            <code>&amp;lt;composite:actionSource&amp;gt;</code>
            element is
            included in the usage contract that refers to the inner
            button in the <code>&amp;lt;composite:implementation&amp;gt;</code>
            section.</p>

            </li>

            <li><p>Provide an "action" to invoke when the button is
            pressed.
            </p>

            <p>In this case, a
            <code>&amp;lt;composite:attribute&amp;gt;</code> element
            is included
            in the usage contract that refers to the inner button in the
            <code>&amp;lt;composite:implementation&amp;gt;</code>
            section and
            declares the proper method signature for an "action".</p>

            </li>

            <li><p>Provide parameters to the composite component for
            labels and other rendering specific aspects of the composite
            component.</p>

            <p>In this case, one or more
            <code>&amp;lt;composite:attribute&amp;gt;</code>
            elements are included
            in the usage contract and those parameters are referred to in
            the <code>&amp;lt;composite:implementation&amp;gt;</code>
            section
            using EL expressions like
            <code>#{cc.attrs.usernameLabel}</code>,
            assuming <code>usernameLabel</code> is the <code>name</code>
            of one of the <code>&amp;lt;composite:attribute&amp;gt;</code>
            elements in the usage contract.</p>

            </li>


            <li><p>Add <code>ValueChangeListener</code>s,
            <code>Converter</code>s, or <code>Validator</code>s
            to either
            or both text fields.
            </p>

            <p>In this case, a
            <code>&amp;lt;composite:editableValueHolder&amp;gt;</code>
            element is
            included in the usage contract that refers to the inner text
            field in the <code>&amp;lt;composite:implementation&amp;gt;</code>
            section. In the case of wanting to enable only adding a
            <code>Converter</code> (and not a
            <code>ValueChangeListener</code> or <code>Validator</code>,
            a
            <code>&amp;lt;composite:valueHolder&amp;gt;</code>
            element would be
            used.</p>

            </li>

            <li><p>Add facet children to the login panel.</p>

            <p>In this case, a <code>&amp;lt;composite:facet&amp;gt;</code>
            element is included in the usage contract that refers to the
            inner <code>&amp;lt;composite:renderFacet&amp;gt;</code>
            element in
            the <code>&amp;lt;composite:implementation&amp;gt;</code>
            section.
            </p>

            </li>


            </ul>

            <p>For each of the behaviorial interfaces in Section JSF.3.2
            of
            the specification, there is a tag in the
            <code>composite:</code> library to nest inside of the
            <code>&amp;lt;composite:interface&amp;gt;</code>
            section.
            </p>


            <p>If the <code>&amp;lt;composite:interface&amp;gt;</code>
            section
            is not present in a <em>VDL view</em>, the contract will
            be
            inferred as described in the specification. There must be
            zero or one of these elements in a composite component VDL
            file. If a <code>&amp;lt;composite:interface&amp;gt;</code>
            element
            does appear, there must be an accompanying
            <code>&amp;lt;composite:implementation&amp;gt;</code>
            element in the
            same VDL file. </p>

            <p><b>Nesting of composite components</b></p>

            <p>The implementation must support nesting of composite
            components. Specifically, it must be possible for the
            <code>&amp;lt;composite:implementation&amp;gt;</code>
            section of a
            composite component to act as the <em>using page</em>
            for
            another composite component. When a composite component
            exposes a behavioral interface to the <em>using page</em>,
            such as a <code>&amp;lt;composite:actionSource&amp;gt;</code>,
            <code>&amp;lt;composite:editableValueHolder&amp;gt;</code>,
            <code>&amp;lt;composite:valueHolder&amp;gt;</code> or
            other
            behavioral interface, it must be possible to
            &amp;#8220;propogate&amp;#8221; the exposure of such an interface in
            the case of a nested composite component. The composite
            component author must ensure that the value of the
            <code>name</code> attributes exactly match at all levels
            of
            the nesting to enable this exposure to work. The
            implementation is not required to support
            &amp;#8220;re-mapping&amp;#8221; of names in a nested composite
            component.</p>

            <p>For example, consider this nested composite component.</p>

            <p>Using page</p>

            <div class="syntax"><div class="html4strict"
            style="font-family: monospace;"><ol><li class="li1"><div
            class="de1"><span class="sc2">&amp;lt;ez:actionSourceOuter&amp;gt;</span></div></li>
            <li class="li2"><div class="de2">&amp;nbsp; <span
            class="sc2">&amp;lt;f:actionListener <span class="kw3">for</span>=<span
            class="st0">&amp;quot;button1&amp;quot;</span> /<span
            class="kw2">&amp;gt;</span></span></div></li>
            <li class="li1"><div class="de1"><span class="sc2"><span
            class="kw2">&amp;lt;</span>/ez:actionSourceOuter&amp;gt;</span>
            </div></li></ol></div></div>

            <p>actionSourceOuter.xhtml: Outer composite component</p>

            <div class="syntax"><div class="html4strict"
            style="font-family: monospace;"><ol><li class="li1"><div
            class="de1"><span class="sc2">&amp;lt;composite:interface&amp;gt;</span></div></li>
            <li class="li2"><div class="de2">&amp;nbsp; <span
            class="sc2">&amp;lt;composite:actionSource <span class="kw3">name</span>=<span
            class="st0">&amp;quot;button1&amp;quot;</span> /<span
            class="kw2">&amp;gt;</span></span></div></li>
            <li class="li1"><div class="de1"><span class="sc2"><span
            class="kw2">&amp;lt;</span>/composite:interface&amp;gt;</span></div></li>
            <li class="li2"><div class="de2">&amp;nbsp;</div></li>
            <li class="li1"><div class="de1"><span class="sc2">&amp;lt;composite:implementation&amp;gt;</span></div></li>
            <li class="li2"><div class="de2">&amp;nbsp; <span
            class="sc2">&amp;lt;ez:actionSourceInner /<span class="kw2">&amp;gt;</span></span></div></li>
            <li class="li1"><div class="de1"><span class="sc2"><span
            class="kw2">&amp;lt;</span>/composite:implementation&amp;gt;</span>
            </div></li></ol></div></div>

            <p>actionSourceInner.xhtml: the composite component used
            within a
            composite component.</p>

            <div class="syntax"><div class="html4strict"
            style="font-family: monospace;"><ol><li class="li1"><div
            class="de1"><span class="sc2">&amp;lt;composite:interface&amp;gt;</span></div></li>
            <li class="li2"><div class="de2">&amp;nbsp; <span
            class="sc2">&amp;lt;composite:actionSource <span class="kw3">name</span>=<span
            class="st0">&amp;quot;button1&amp;quot;</span> /<span
            class="kw2">&amp;gt;</span></span></div></li>
            <li class="li1"><div class="de1"><span class="sc2"><span
            class="kw2">&amp;lt;</span>/composite:interface&amp;gt;</span></div></li>
            <li class="li2"><div class="de2">&amp;nbsp;</div></li>
            <li class="li1"><div class="de1"><span class="sc2">&amp;lt;composite:implementation&amp;gt;</span></div></li>
            <li class="li2"><div class="de2">&amp;nbsp; <span
            class="sc2">&amp;lt;h:commandButton <span class="kw3">id</span>=<span
            class="st0">&amp;quot;button1&amp;quot;</span> <span
            class="kw3">value</span>=<span class="st0">&amp;quot;the
            real button&amp;quot;</span> /<span class="kw2">&amp;gt;</span></span></div></li>
            <li class="li1"><div class="de1"><span class="sc2"><span
            class="kw2">&amp;lt;</span>/composite:implementation&amp;gt;</span>
            </div></li></ol></div></div>

            <p>The <code>id</code> of the <code>&amp;lt;h:commandButton&amp;gt;</code>
            on
            line 6 of actionSourceInner.xhtml must match the <code>name</code>
            on
            line 2 of that file (this is a standard requirement for all
            composite
            components, nested or not). That <code>id</code> must
            also match the
            <code>name</code> on line 2 of actionSourceOuter.xhtml,
            and the
            <code>for</code> on line 2 of the using page.</p>

            <p>The implementation must support any level of nesting as
            long as the
            <code>for</code>, <code>name</code>, and
            <code>id</code> values match
            up. Furthermore, the <code>targets</code> attribute is
            also valid for
            use in this nested fashion.</p>

            <p><b>Naming containers within composite components</b></p>

            <p>Composite components are themselves naming containers so
            that any
            possible id conflicts between inner components and components in the
            using page are avoided. However, special care must be taken when
            using
            naming containers in the <code>&amp;lt;composite:implementation&amp;gt;</code>
            section. In such cases the value of the &amp;#8220;name&amp;#8221;
            attribute,
            or the values of the &amp;#8220;targets&amp;#8221; attribute must be
            used with a
            clientId relative to the <em>top level component</em> to
            expose any
            attached object targets to the using page. For example:</p>

            <p>Using page</p>

            <div class="syntax"><div class="html4strict"
            style="font-family: monospace;"><ol><li class="li1"><div
            class="de1"><span class="sc2">&amp;lt;ez:loginButton&amp;gt;</span></div></li>
            <li class="li2"><div class="de2">&amp;nbsp; <span
            class="sc2">&amp;lt;f:actionListener <span class="kw3">for</span>=<span
            class="st0">&amp;quot;button&amp;quot;</span> <span
            class="kw3">binding</span>=<span class="st0">&amp;quot;#{foo.actionListener}&amp;quot;</span>
            /<span class="kw2">&amp;gt;</span></span></div></li>
            <li class="li1"><div class="de1"><span class="sc2"><span
            class="kw2">&amp;lt;</span>/ez:loginButton&amp;gt;</span>
            </div></li></ol></div></div>


            <p>loginButton.xhtml</p>

            <div class="syntax"><div class="html4strict"
            style="font-family: monospace;"><ol><li class="li1"><div
            class="de1"><span class="sc2">&amp;lt;composite:interface&amp;gt;</span></div></li>
            <li class="li2"><div class="de2">&amp;nbsp; <span
            class="sc2">&amp;lt;composite:actionSource <span class="kw3">name</span>=<span
            class="st0">&amp;quot;button&amp;quot;</span> targets=<span
            class="st0">&amp;quot;form:button&amp;quot;</span> /<span
            class="kw2">&amp;gt;</span></span></div></li>
            <li class="li1"><div class="de1"><span class="sc2"><span
            class="kw2">&amp;lt;</span>/composite:interface&amp;gt;</span></div></li>
            <li class="li2"><div class="de2">&amp;nbsp;</div></li>
            <li class="li1"><div class="de1"><span class="sc2">&amp;lt;composite:implementation&amp;gt;</span></div></li>
            <li class="li2"><div class="de2">&amp;nbsp;</div></li>
            <li class="li1"><div class="de1">&amp;nbsp; <span
            class="sc2">&amp;lt;h:form <span class="kw3">id</span>=<span
            class="st0">&amp;quot;form&amp;quot;</span><span
            class="kw2">&amp;gt;</span></span></div></li>
            <li class="li2"><div class="de2">&amp;nbsp; &amp;nbsp;
            <span class="sc2">&amp;lt;h:commandButton <span class="kw3">id</span>=<span
            class="st0">&amp;quot;button&amp;quot;</span> <span
            class="kw3">value</span>=<span class="st0">&amp;quot;Submit&amp;quot;</span>
            /<span class="kw2">&amp;gt;</span></span></div></li>
            <li class="li1"><div class="de1">&amp;nbsp; <span
            class="sc2"><span class="kw2">&amp;lt;</span>/h:form&amp;gt;</span></div></li>
            <li class="li2"><div class="de2"><span class="sc2"><span
            class="kw2">&amp;lt;</span>/composite:implementation&amp;gt;</span>
            </div></li></ol></div></div>

            <p>Because the button on line 8 resides within a form, it must
            be
            referred to using a client id, relative to the <em>top level
            component</em>, in the "targets" attribute on line 2. Using a
            relative
            clientId is required due to the semantics of
            <code>UIComponent.findComponent()</code>.</p>

            </div>

        